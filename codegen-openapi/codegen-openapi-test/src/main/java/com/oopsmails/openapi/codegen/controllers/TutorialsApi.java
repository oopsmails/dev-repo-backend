/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.oopsmails.openapi.codegen.controllers;

import com.oopsmails.openapi.codegen.model.Tutorial;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-04-28T14:32:46.157292-04:00[America/Toronto]")

@Validated
@Api(value = "tutorials", description = "the tutorials API")
public interface TutorialsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /tutorials
     *
     * @return Returns tutorials (status code 200)
     */
    @ApiOperation(value = "", nickname = "tutorialsGet", notes = "", response = Tutorial.class, responseContainer = "List", tags={ "tutorial interface", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns tutorials", response = Tutorial.class, responseContainer = "List") })
    @RequestMapping(value = "/tutorials",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Tutorial>> tutorialsGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"author\" : \"author\", \"name\" : \"name\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /tutorials/{id}
     *
     * @param id id of tutorial (required)
     * @return tutorial was deleted successfully (status code 204)
     *         or tutorial not found (status code 404)
     *         or Unexpected error (status code 200)
     */
    @ApiOperation(value = "", nickname = "tutorialsIdDelete", notes = "", tags={ "tutorial interface", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "tutorial was deleted successfully"),
        @ApiResponse(code = 404, message = "tutorial not found"),
        @ApiResponse(code = 200, message = "Unexpected error") })
    @RequestMapping(value = "/tutorials/{id}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> tutorialsIdDelete(@ApiParam(value = "id of tutorial",required=true) @PathVariable("id") Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /tutorials/{id}
     *
     * @param id id of tutorial (required)
     * @return return tutorial with the specified id (status code 200)
     *         or tutorial not found (status code 404)
     *         or Unexpected error (status code 200)
     */
    @ApiOperation(value = "", nickname = "tutorialsIdGet", notes = "", response = Tutorial.class, tags={ "tutorial interface", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "return tutorial with the specified id", response = Tutorial.class),
        @ApiResponse(code = 404, message = "tutorial not found"),
        @ApiResponse(code = 200, message = "Unexpected error") })
    @RequestMapping(value = "/tutorials/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Tutorial> tutorialsIdGet(@ApiParam(value = "id of tutorial",required=true) @PathVariable("id") Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"author\" : \"author\", \"name\" : \"name\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /tutorials
     *
     * @param tutorial  (optional)
     * @return Ok, tutorial successfuly saved (status code 200)
     *         or something went wrong (status code 400)
     *         or Unexpected error (status code 200)
     */
    @ApiOperation(value = "", nickname = "tutorialsPost", notes = "", response = Tutorial.class, tags={ "tutorial interface", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok, tutorial successfuly saved", response = Tutorial.class),
        @ApiResponse(code = 400, message = "something went wrong"),
        @ApiResponse(code = 200, message = "Unexpected error") })
    @RequestMapping(value = "/tutorials",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Tutorial> tutorialsPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Tutorial tutorial) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"author\" : \"author\", \"name\" : \"name\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
